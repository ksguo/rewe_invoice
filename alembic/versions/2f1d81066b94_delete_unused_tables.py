"""delete unused tables

Revision ID: 2f1d81066b94
Revises: 57201a57cadb
Create Date: 2024-07-10 14:25:23.470140

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "2f1d81066b94"
down_revision: Union[str, None] = "57201a57cadb"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TABLE IF EXISTS users_attributes CASCADE")
    op.execute("DROP TABLE IF EXISTS brands_attributes CASCADE")
    op.execute("DROP TABLE IF EXISTS household_members CASCADE")
    op.execute("DROP TABLE IF EXISTS pets CASCADE")
    op.execute("DROP TABLE IF EXISTS attributes CASCADE")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users_attributes",
        sa.Column("attribute_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "user_attribute_status", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "user_attribute_score",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["attribute_id"],
            ["attributes.attribute_id"],
            name="users_attributes_attribute_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.user_id"], name="users_attributes_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "attribute_id", "user_id", name="users_attributes_pkey"
        ),
    )
    op.create_table(
        "pets",
        sa.Column("pet_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("pet_type", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("pet_age", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("pet_status", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.user_id"], name="pets_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("pet_id", name="pets_pkey"),
    )
    op.create_table(
        "household_members",
        sa.Column(
            "household_member_id", sa.INTEGER(), autoincrement=True, nullable=False
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "household_member_type", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "household_member_sex",
            sa.VARCHAR(length=1),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "household_member_age", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.user_id"], name="household_members_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("household_member_id", name="household_members_pkey"),
    )
    op.create_table(
        "brands_attributes",
        sa.Column("brand_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("attribute_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "brand_attribute_score",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "brand_attribute_created",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "brand_attribute_modified",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["attribute_id"],
            ["attributes.attribute_id"],
            name="brands_attributes_attribute_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["brand_id"], ["brands.brand_id"], name="brands_attributes_brand_id_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "brand_id", "attribute_id", name="brands_attributes_pkey"
        ),
    )
    op.create_table(
        "attributes",
        sa.Column("attribute_id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("attribute_name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "attribute_description", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "attribute_created",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "attribute_modified",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("attribute_id", name="attributes_pkey"),
    )
    # ### end Alembic commands ###
